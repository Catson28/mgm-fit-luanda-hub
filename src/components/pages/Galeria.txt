"use client"
import { useState, useEffect } from 'react';
import { Layout } from '@/components/layout/Layout';
import { Card, CardContent, CardDescription, CardHeader, CardTitle } from '@/components/ui/card';
import { Image } from 'lucide-react';
import { Button } from "@/components/ui/button";
import Image from 'next/image';

interface GalleryItem {
  id: string;
  title: string;
  description?: string;
  date?: string;
  image: { url: string };
}

const Galeria: React.FC = () => {
  const [gallery, setGallery] = useState<GalleryItem[]>([]);
  const [loading, setLoading] = useState(true);

  useEffect(() => {
    const fetchGallery = async () => {
      setLoading(true);
      try {
        const response = await fetch('/api/gallery', {
          headers: { 'Content-Type': 'application/json' },
        });
        if (!response.ok) throw new Error('Failed to fetch gallery');
        const data: GalleryItem[] = await response.json();
        setGallery(data);
      } catch (error) {
        console.error('Error fetching gallery:', error);
      } finally {
        setLoading(false);
      }
    };
    fetchGallery();
  }, []);

  const handleAddImage = async (imageData: Partial<GalleryItem>) => {
    try {
      const token = localStorage.getItem('token');
      const createRes = await fetch('/api/gallery', {
        method: 'POST',
        headers: {
          Authorization: `Bearer ${token}`,
          'Content-Type': 'application/json',
        },
        body: JSON.stringify(imageData),
      });

      if (!createRes.ok) throw new Error('Failed to create gallery item');

      const fetchRes = await fetch('/api/gallery', {
        headers: { 'Content-Type': 'application/json' },
      });

      if (!fetchRes.ok) throw new Error('Failed to fetch gallery');

      const data: GalleryItem[] = await fetchRes.json();
      setGallery(data);
    } catch (error) {
      console.error('Error adding gallery item:', error);
    }
  };

  return (
    <Layout>
      <div className="mb-6">
        <div className="flex flex-col md:flex-row md:items-center md:justify-between gap-4">
          <div>
            <h1 className="font-heading text-3xl font-bold">Galeria</h1>
            <p className="text-muted-foreground">
              Momentos especiais do MGM Fitness Luanda
            </p>
          </div>
          <Button className="bg-mgm-blue hover:bg-mgm-blue-dark" onClick={() => handleAddImage({
            title: 'Nova Imagem',
            description: 'Descrição da nova imagem',
            date: new Date().toISOString(),
            imageId: 'placeholder_image_id',
          })}>
            <Image className="mr-2 h-4 w-4" />
            Adicionar Imagem
          </Button>
        </div>
      </div>

      {loading ? (
        <div className="text-center p-8">Carregando...</div>
      ) : (
        <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6">
          {gallery.map((image) => (
            <Card key={image.id} className="overflow-hidden group">
              <div className="aspect-video relative overflow-hidden">
                <Image fill 
                  src={image.image.url}
                  alt={image.title}
                  className="object-cover w-full h-full transition-transform duration-300 group-hover:scale-105"
                />
              </div>
              <CardHeader className="pb-2">
                <CardTitle className="text-lg">{image.title}</CardTitle>
                <CardDescription>{image.date ? new Date(image.date).toLocaleDateString() : ''}</CardDescription>
              </CardHeader>
              <CardContent>
                <p className="text-sm text-muted-foreground">{image.description}</p>
              </CardContent>
            </Card>
          ))}
        </div>
      )}
    </Layout>
  );
};

export default Galeria;